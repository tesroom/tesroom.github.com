<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Classic</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Aug 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Markdown Guide (modified)</title>
      <link>/post/2018/08/30/markdown-guide-modified/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/30/markdown-guide-modified/</guid>
      <description>

&lt;h1 id=&#34;an-h1-header&#34;&gt;An h1 header&lt;/h1&gt;

&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;

&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this one&lt;/li&gt;
&lt;li&gt;that one&lt;/li&gt;
&lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &amp;mdash; not considering the asterisk &amp;mdash; the actual text
content starts at 4-columns in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;

&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &amp;ldquo;it&amp;rsquo;s all
in chapters 12&amp;ndash;14&amp;rdquo;). Three dots &amp;hellip; will be converted to an ellipsis.
Unicode is supported. ☺&lt;/p&gt;

&lt;h2 id=&#34;an-h2-header&#34;&gt;An h2 header&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a numbered list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item&lt;/li&gt;
&lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here&amp;rsquo;s a code sample:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define foobar() {
    print &amp;quot;Welcome to flavor country!&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;an-h3-header&#34;&gt;An h3 header&lt;/h3&gt;

&lt;p&gt;Now a nested list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, get these ingredients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;carrots&lt;/li&gt;
&lt;li&gt;celery&lt;/li&gt;
&lt;li&gt;lentils&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Boil some water.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find wooden spoon
uncover pot
stir
cover pot
balance wooden spoon precariously on pot handle
wait 10 minutes
goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a link to &lt;a href=&#34;http://foo.bar&#34;&gt;a website&lt;/a&gt;, to a &lt;a href=&#34;local-doc.html&#34;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&#34;#an-h2-header&#34;&gt;section heading in the current
doc&lt;/a&gt;. Here&amp;rsquo;s a footnote &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Tables can look like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;material&lt;/th&gt;
&lt;th&gt;color&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;leather&lt;/td&gt;
&lt;td&gt;brown&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;hemp canvas&lt;/td&gt;
&lt;td&gt;natural&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;glass&lt;/td&gt;
&lt;td&gt;transparent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Table: Shoes, their sizes, and what they&amp;rsquo;re made of&lt;/p&gt;

&lt;p&gt;(The above is the caption for the table.)&lt;/p&gt;

&lt;p&gt;A horizontal rule follows.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here&amp;rsquo;s a definition list:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;apples&lt;/dt&gt;
&lt;dd&gt;Good for making applesauce.&lt;/dd&gt;
&lt;dt&gt;oranges&lt;/dt&gt;
&lt;dd&gt;Citrus!&lt;/dd&gt;
&lt;dt&gt;tomatoes&lt;/dt&gt;
&lt;dd&gt;There&amp;rsquo;s no &amp;ldquo;e&amp;rdquo; in tomatoe.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;(Put a blank line between each term/definition pair to spread
things out more.)&lt;/p&gt;

&lt;p&gt;and images can be specified like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/goodroot/hugo-classic/raw/master/images/partywizard.gif&#34; alt=&#34;example image&#34; title=&#34;An exemplary image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Inline math equations go in like so: \(\omega = d\phi / dt\).
Display math should get its own line and be put in in
double-dollarsigns:&lt;/p&gt;

&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;

&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;

&lt;h4 id=&#34;images-auto-center&#34;&gt;Images auto center:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://emojis.slackmojis.com/emojis/images/1475875185/1223/party-dinosaur.gif?1475875185&#34; alt=&#34;Party&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Footnote text goes here.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hacker with Bullhorn</title>
      <link>/post/2012/04/23/hacker-with-horn/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012/04/23/hacker-with-horn/</guid>
      <description>&lt;p&gt;Hacker with bullhorn: &amp;ldquo;Save your money! Accept one of our free tanks! It is invulnerable, and can drive across rocks and swamps at ninety miles an hour while getting a hundred miles to the gallon!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Prospective station wagon buyer: &amp;ldquo;I know what you say is true&amp;hellip;but&amp;hellip;er&amp;hellip;I don&amp;rsquo;t know how to maintain a tank!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Bullhorn: &amp;ldquo;You don&amp;rsquo;t know how to maintain a station wagon either!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Buyer: &amp;ldquo;But this dealership has mechanics on staff. If something goes wrong with my station wagon, I can take a day off work, bring it here, and pay them to work on it while I sit in the waiting room for hours, listening to elevator music.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Bullhorn: &amp;ldquo;But if you accept one of our free tanks we will send volunteers to your house to fix it for free while you sleep!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Buyer: &amp;ldquo;Stay away from my house, you freak!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Bullhorn: &amp;ldquo;But&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Buyer: &amp;ldquo;Can&amp;rsquo;t you see that everyone is buying station wagons?&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Command Line Awesomeness</title>
      <link>/post/2012/03/12/command-line-awesomeness/</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012/03/12/command-line-awesomeness/</guid>
      <description>&lt;p&gt;This crud is called HTML (HyperText Markup Language) and it is basically a very simple programming language instructing your web browser how to draw a page on a screen. Anyone can learn HTML and many people do. The important thing is that no matter what splendid multimedia web pages they might represent, HTML files are just telegrams.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When Ronald Reagan was a radio announcer, he used to call baseball games by reading the terse descriptions that trickled in over the telegraph wire and were printed out on a paper tape. He would sit there, all by himself in a padded room with a microphone, and the paper tape would eke out of the machine and crawl over the palm of his hand printed with cryptic abbreviations. If the count went to three and two, Reagan would describe the scene as he saw it in his mind&amp;rsquo;s eye: &amp;ldquo;The brawny left-hander steps out of the batter&amp;rsquo;s box to wipe the sweat from his brow. The umpire steps forward to sweep the dirt from home plate.&amp;rdquo; and so on. When the cryptogram on the paper tape announced a base hit, he would whack the edge of the table with a pencil, creating a little sound effect, and describe the arc of the ball as if he could actually see it. His listeners, many of whom presumably thought that Reagan was actually at the ballpark watching the game, would reconstruct the scene in their minds according to his descriptions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is exactly how the World Wide Web works: the HTML files are the pithy description on the paper tape, and your Web browser is Ronald Reagan. The same is true of Graphical User Interfaces in general.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Juicy Code</title>
      <link>/post/2012/01/23/juicy-code/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012/01/23/juicy-code/</guid>
      <description>&lt;p&gt;Check out this JUICY! code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def with_value_from_database(value)
  self.class.from_database(name, value, type)
end

def with_cast_value(value)
  self.class.with_cast_value(name, value, type)
end

def with_type(type)
  if changed_in_place?
    with_value_from_user(value).with_type(type)
  else
    self.class.new(name, value_before_type_cast, type, original_attribute)
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>